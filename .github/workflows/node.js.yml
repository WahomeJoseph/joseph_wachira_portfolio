name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CI: true
  NODE_ENV: test

jobs:
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup pnpm first (before Node.js)
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: true

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'

    - name: Verify pnpm
      run: pnpm --version

    - name: Install dependencies
      run: pnpm install

    - name: Run tests
      run: pnpm test
      env:
        CI: true
        NODE_ENV: test

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.node-version }}-${{ matrix.os }}
        path: coverage
        retention-days: 7

  build:
    name: Build and Analyze
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build project
      run: pnpm build

    - name: Analyze bundle size
      uses: preactjs/compressed-size-action@v2
      with:
        pattern: 'dist/**/*.{js,css,json}'
        compression: 'gzip'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist
        retention-days: 7

  deploy:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build project
      run: pnpm build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        zeit-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        working-directory: './'
        